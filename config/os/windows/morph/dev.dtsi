//mp_wDEV_pound
MORPH_KA(
    w,
    DEV,
    pound,
    MOD_LALT,
    &kp POUND,             // tap:  #
    &kp LC(LS(SEMICOLON))  // alt:  °
)

// tap:         $
// alt:         €
mp_wd_money: morph_windows_dev_money {
    compatible = "zmk,behavior-mod-morph";
    label = "mp_wd_money";
    #binding-cells = <0>;
    mods = <(MOD_LALT)>;
    bindings = <&kp DLLR>, <&kp LC(N5)>;
    keep-mods = <(MOD_LALT)>;
};

// tap:         [
// alt:         «
mp_wd_lb: morph_windows_dev_left_brackets {
    compatible = "zmk,behavior-mod-morph";
    label = "mp_wd_lb";
    #binding-cells = <0>;
    mods = <(MOD_LALT)>;
    bindings = <&kp LBKT>, <&kp LC(LBKT)>;
    keep-mods = <(MOD_LALT)>;
};

// tap:         ]
// alt:         »
mp_wd_rb: morph_windows_dev_right_brackets {
    compatible = "zmk,behavior-mod-morph";
    label = "mp_wd_rb";
    #binding-cells = <0>;
    mods = <(MOD_LALT)>;
    bindings = <&kp RBKT>, <&kp LC(RBKT)>;
    keep-mods = <(MOD_LALT)>;
};

// mp_wDEV_a
MORPH_KSA(
    w,
    DEV,
    a,
    asterisk,
    MOD_LALT,
    &kp ASTRK,  // tap:    *
    &m_wd_ma,   // shift:  *=
    &m_wd_eo    // alt:    **
)

// mp_wDEV_p
MORPH_KSA(
    w,
    DEV,
    p,
    plus,
    MOD_LALT,
    &kp PLUS,  // tap:    +
    &m_wd_as,  // shift:  +=
    &m_wd_io   // alt:    ++
)

// mp_wDEV_m
MORPH_KSA(
    w,
    DEV,
    m,
    minus,
    MOD_LALT,
    &kp MINUS,  // tap:    -
    &m_wd_sa,  // shift:  -=
    &m_wd_do   // alt:    --
)

// tap:         =
// shift:       ===
// alt:         =>
mp_wd_e_a: morph_windows_dev_equal_alt {
    compatible = "zmk,behavior-mod-morph";
    label = "mp_wd_e_a";
    #binding-cells = <0>;
    mods = <(MOD_LALT)>;
    bindings = <&kp EQUAL>, <&m_wd_a>;
    keep-mods = <(MOD_LALT)>;
};
mp_wd_e: morph_windows_dev_equal {
    compatible = "zmk,behavior-mod-morph";
    label = "mp_wd_e";
    #binding-cells = <0>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
    bindings = <&mp_wd_e_a>, <&m_wd_se>;
};

// tap:         /
// shift:       /=
// ctrl:        // line comment
// alt:         /* block comment *
mp_wd_s_s: morph_windows_dev_slash_shift {
    compatible = "zmk,behavior-mod-morph";
    label = "mp_wd_s_s";
    #binding-cells = <0>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
    bindings = <&kp FSLH>, <&m_wd_da>;
};
mp_wd_s: morph_windows_dev_slash {
    compatible = "zmk,behavior-mod-morph";
    label = "mp_wd_s";
    #binding-cells = <0>;
    mods = <(MOD_LALT)>;
    bindings = <&mp_wd_s_s>, <&kp LS(A)>;
    keep-mods = <(MOD_LALT)>;
};

// tap:         &
// shift:       &&=
// alt:         &&
mp_wd_lao_a: morph_windows_dev_logical_and_operator_alt {
    compatible = "zmk,behavior-mod-morph";
    label = "mp_wd_lao_a";
    #binding-cells = <0>;
    mods = <(MOD_LALT)>;
    bindings = <&kp AMPS>, <&m_wd_la>;
    keep-mods = <(MOD_LALT)>;
};
mp_wd_lao: morph_windows_dev_logical_and_operator {
    compatible = "zmk,behavior-mod-morph";
    label = "mp_wd_lao";
    #binding-cells = <0>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
    bindings = <&mp_wd_lao_a>, <&m_wd_laa>;
};

// tap:         |
// shift:       ||=
// alt:         ||
mp_wd_loo_a: morph_windows_dev_logical_or_operator_alt {
    compatible = "zmk,behavior-mod-morph";
    label = "mp_wd_loo_a";
    #binding-cells = <0>;
    mods = <(MOD_LALT)>;
    bindings = <&kp PIPE>, <&m_wd_lo>;
    keep-mods = <(MOD_LALT)>;
};
mp_wd_loo: morph_windows_dev_logical_or_operator {
    compatible = "zmk,behavior-mod-morph";
    label = "mp_wd_loo";
    #binding-cells = <0>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
    bindings = <&mp_wd_loo_a>, <&m_wd_loa>;
};

// mp_wDEV_qs
MORPH_KASAS(
    w,
    DEV,
    qs,
    question_symbol,
    MOD_LALT,
    &kp QMARK,     // tap:        ?
    &kp LC(FSLH),  // alt:        ¿
    &m_wd_nca,     // shift:      ??=
    &m_wd_nco      // alt+shift:  ??
)

// mp_wDEV_es
MORPH_KASAS(
    w,
    DEV,
    es,
    exclamation_symbol,
    MOD_LALT,
    &kp EXCL,    // tap:        !
    &kp LC(N1),  // alt:        ¡
    &m_wd_si,    // shift:      !==
    &m_wd_dno    // alt+shift:  !!
)

// tap:         ?.
// shift:       ?░:░
mp_wd_ql: morph_windows_dev_question_logical {
    compatible = "zmk,behavior-mod-morph";
    label = "mp_wd_ql";
    #binding-cells = <0>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
    bindings = <&m_wd_oco>, <&m_wd_cto>;
};

// tap:         <
// shift:       <=
// alt:         <░/> /* html void tag */
mp_wd_lt_s: morph_windows_dev_lower_than_shift {
    compatible = "zmk,behavior-mod-morph";
    label = "mp_wd_lt_s";
    #binding-cells = <0>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
    bindings = <&kp LT>, <&m_wd_ltoet>;
};
mp_wd_lt: morph_windows_dev_lower_than {
    compatible = "zmk,behavior-mod-morph";
    label = "mp_wd_lt";
    #binding-cells = <0>;
    mods = <(MOD_LALT)>;
    bindings = <&mp_wd_lt_s>, <&m_wd_hvt>;
    keep-mods = <(MOD_LALT)>;
};

// tap:         >
// shift:       >=
// alt:         </░> /* html close tag */
mp_wd_gt_s: morph_windows_dev_greater_than_shift {
    compatible = "zmk,behavior-mod-morph";
    label = "mp_wd_gt_s";
    #binding-cells = <0>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
    bindings = <&kp GT>, <&m_wd_gtoet>;
};
mp_wd_gt: morph_windows_dev_greater_than {
    compatible = "zmk,behavior-mod-morph";
    label = "mp_wd_gt";
    #binding-cells = <0>;
    mods = <(MOD_LALT)>;
    bindings = <&mp_wd_gt_s>, <&m_wd_hct>;
    keep-mods = <(MOD_LALT)>;
};
