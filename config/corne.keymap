/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

&mt {
    flavor = "tap-preferred";
    tapping-term-ms = <220>;
    quick-tap-ms = <220>;// repeat on tap-into-hold
    hold-trigger-key-positions = <0>;// tap on interrupt
};

/* Layers */

#define BASE_L  0
#define SYMBOLS_L  1
#define ARROWS_L   2
#define NUMBERS_L  3
#define SETTINGS_L 4

/ {
    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <300>;
            quick-tap-ms = <200>;
            flavor = "tap-preferred";
            bindings =
                <&kp>,
                <&kp>;
        };

        cw: caps_word {
            compatible = "zmk,behavior-caps-word";
            label = "PROG_CAPS";
            #binding-cells = <0>;
            continue-list = <UNDERSCORE MINUS BACKSPACE>;
        };

        mp_a: morph_a {
            compatible = "zmk,behavior-mod-morph";
            label = "mp_a";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&m_aa>, <&m_aa_shift>;
        };

        mp_e: morph_e {
            compatible = "zmk,behavior-mod-morph";
            label = "mp_e";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&m_ae>, <&m_ae_shift>;
        };

        mp_i: morph_i {
            compatible = "zmk,behavior-mod-morph";
            label = "mp_i";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&m_ai>, <&m_ai_shift>;
        };

        mp_o: morph_o {
            compatible = "zmk,behavior-mod-morph";
            label = "mp_o";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&m_ao>, <&m_ao_shift>;
        };

        mp_u: morph_u {
            compatible = "zmk,behavior-mod-morph";
            label = "mp_u";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&mt &m_uu &m_au>, <&mt &m_uu_shift &m_au_shift>;
        };

        mp_n: morph_n {
            compatible = "zmk,behavior-mod-morph";
            label = "mp_n";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&m_an>, <&m_an_shift>;
        };

        mp_bd: morph_backspace_del {
            compatible = "zmk,behavior-mod-morph";
            label = "mp_bd";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&mt LC(BSPC) BSPC>, <&mt LC(DEL) DEL>;
        };

        mp_bc: morph_backspace_caps {
            compatible = "zmk,behavior-mod-morph";
            label = "mp_bc";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&mt LC(BSPC) BSPC>, <&kp CLCK>;
        };

        mp_kq: morph_key_quote {
            compatible = "zmk,behavior-mod-morph";
            label = "mp_kq";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&kp SQT>, <&kp DQT>;
        };

        mp_kq_alt: morph_key_quote_alt {
            compatible = "zmk,behavior-mod-morph";
            label = "mp_kq_alt";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&kp GRAVE>, <&kp TILDE>;
        };

        mp_ko: morph_key_operator {
            compatible = "zmk,behavior-mod-morph";
            label = "mp_ko";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&kp MINUS>, <&kp PLUS>;
        };

        mp_ko_alt: morph_key_operator_alt {
            compatible = "zmk,behavior-mod-morph";
            label = "mp_ko_alt";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&kp EQUAL>, <&kp ASTRK>;
        };

        mp_kl: morph_key_logic {
            compatible = "zmk,behavior-mod-morph";
            label = "mp_kl";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&kp FSLH>, <&kp AMPS>;
        };

        mp_kl_alt: morph_key_logic_alt {
            compatible = "zmk,behavior-mod-morph";
            label = "mp_kl_alt";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&kp QMARK>, <&kp PIPE>;
        };

        mp_kb: morph_key_brackets {
            compatible = "zmk,behavior-mod-morph";
            label = "mp_kb";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&m_bc>, <&m_ba_h>;
        };

        mp_kb_alt: morph_key_brackets_alt {
            compatible = "zmk,behavior-mod-morph";
            label = "mp_kb_alt";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&m_bs>, <&m_br>;
        };
    };

    combos {
        compatible = "zmk,combos";

        combo_caps-word {
            bindings = <&cw>;
            key-positions = <16 19>;
        };

        combo_accent-a {
            bindings = <&mp_a>;
            key-positions = <13 20>;
            layers = <0>;
        };

        combo_accent-e {
            bindings = <&mp_e>;
            key-positions = <20 15>;
            layers = <0>;
        };

        combo_accent-i {
            bindings = <&mp_i>;
            key-positions = <21 15>;
            layers = <0>;
        };

        combo_accent-o {
            bindings = <&mp_o>;
            key-positions = <22 15>;
            layers = <0>;
        };

        combo_accent-u {
            bindings = <&mp_u>;
            key-positions = <9 15>;
            layers = <0>;
        };

        combo_accent-n {
            bindings = <&mp_n>;
            key-positions = <19 15>;
            layers = <0>;
        };

        combo_quotes {
            bindings = <&mp_kq_alt>;
            key-positions = <36 20>;
            layers = <0>;
        };

        combo_operators {
            bindings = <&mp_ko_alt>;
            key-positions = <10 15>;
            layers = <0>;
        };

        combo_logic {
            bindings = <&mp_kl_alt>;
            key-positions = <34 15>;
            layers = <0>;
        };
    };

    macros {
        m_aa: macro_accent_a {
            compatible = "zmk,behavior-macro";
            label = "m_aa";
            #binding-cells = <0>;
            bindings =
                <&macro_press   &kp RALT>,
                <&macro_tap     &kp KP_N0 &kp KP_N2 &kp KP_N2 &kp KP_N5>,
                <&macro_release &kp RALT>;
        };

        m_aa_shift: macro_accent_a_shift {
            compatible = "zmk,behavior-macro";
            label = "m_aa_shift";
            #binding-cells = <0>;
            bindings =
                <&macro_press   &kp RALT>,
                <&macro_tap     &kp KP_N0 &kp KP_N1 &kp KP_N9 &kp KP_N3>,
                <&macro_release &kp RALT>;
        };

        m_ae: macro_accent-e {
            compatible = "zmk,behavior-macro";
            label = "m_ae";
            #binding-cells = <0>;
            bindings =
                <&macro_press   &kp RALT>,
                <&macro_tap     &kp KP_N0 &kp KP_N2 &kp KP_N3 &kp KP_N3>,
                <&macro_release &kp RALT>;
        };

        m_ae_shift: macro_accent_e_shift {
            compatible = "zmk,behavior-macro";
            label = "m_ae_shift";
            #binding-cells = <0>;
            bindings =
                <&macro_press   &kp RALT>,
                <&macro_tap     &kp KP_N0 &kp KP_N2 &kp KP_N0 &kp KP_N1>,
                <&macro_release &kp RALT>;
        };

        m_ai: macro_accent_i {
            compatible = "zmk,behavior-macro";
            label = "m_ai";
            #binding-cells = <0>;
            bindings =
                <&macro_press   &kp RALT>,
                <&macro_tap     &kp KP_N0 &kp KP_N2 &kp KP_N3 &kp KP_N7>,
                <&macro_release &kp RALT>;
        };

        m_ai_shift: macro_accent_i_shift {
            compatible = "zmk,behavior-macro";
            label = "m_ai_shift";
            #binding-cells = <0>;
            bindings =
                <&macro_press   &kp RALT>,
                <&macro_tap     &kp KP_N0 &kp KP_N2 &kp KP_N0 &kp KP_N5>,
                <&macro_release &kp RALT>;
        };

        m_ao: macro_accent_o {
            compatible = "zmk,behavior-macro";
            label = "m_ao";
            #binding-cells = <0>;
            bindings =
                <&macro_press   &kp RALT>,
                <&macro_tap     &kp KP_N0 &kp KP_N2 &kp KP_N4 &kp KP_N3>,
                <&macro_release &kp RALT>;
        };

        m_ao_shift: macro_accent_o_shift {
            compatible = "zmk,behavior-macro";
            label = "m_ao_shift";
            #binding-cells = <0>;
            bindings =
                <&macro_press   &kp RALT>,
                <&macro_tap     &kp KP_N0 &kp KP_N2 &kp KP_N1 &kp KP_N1>,
                <&macro_release &kp RALT>;
        };

        m_au: macro_accent_u {
            compatible = "zmk,behavior-macro";
            label = "m_au";
            #binding-cells = <0>;
            bindings =
                <&macro_press   &kp RALT>,
                <&macro_tap     &kp KP_N0 &kp KP_N2 &kp KP_N5 &kp KP_N0>,
                <&macro_release &kp RALT>;
        };

        m_au_shift: macro_accent_u_shift {
            compatible = "zmk,behavior-macro";
            label = "m_au_shift";
            #binding-cells = <0>;
            bindings =
                <&macro_press   &kp RALT>,
                <&macro_tap     &kp KP_N0 &kp KP_N2 &kp KP_N1 &kp KP_N8>,
                <&macro_release &kp RALT>;
        };

        m_uu: macro_umlaut_u {
            compatible = "zmk,behavior-macro";
            label = "m_uu";
            #binding-cells = <0>;
            bindings =
                <&macro_press   &kp RALT>,
                <&macro_tap     &kp KP_N0 &kp KP_N2 &kp KP_N5 &kp KP_N2>,
                <&macro_release &kp RALT>;
        };

        m_uu_shift: macro_umlaut_u_shift {
            compatible = "zmk,behavior-macro";
            label = "m_uu_shift";
            #binding-cells = <0>;
            bindings =
                <&macro_press   &kp RALT>,
                <&macro_tap     &kp KP_N0 &kp KP_N2 &kp KP_N2 &kp KP_N0>,
                <&macro_release &kp RALT>;
        };

        m_an: macro_accent_n {
            compatible = "zmk,behavior-macro";
            label = "m_an";
            #binding-cells = <0>;
            bindings =
                <&macro_press   &kp RALT>,
                <&macro_tap     &kp KP_N0 &kp KP_N2 &kp KP_N4 &kp KP_N1>,
                <&macro_release &kp RALT>;
        };

        m_an_shift: macro_accent_n_shift {
            compatible = "zmk,behavior-macro";
            label = "m_an_shift";
            #binding-cells = <0>;
            bindings =
                <&macro_press   &kp RALT>,
                <&macro_tap     &kp KP_N0 &kp KP_N2 &kp KP_N0 &kp KP_N9>,
                <&macro_release &kp RALT>;
        };

        m_an_shift: macro_accent_n_shift {
            compatible = "zmk,behavior-macro";
            label = "m_an_shift";
            #binding-cells = <0>;
            bindings =
                <&macro_press   &kp RALT>,
                <&macro_tap     &kp KP_N0 &kp KP_N2 &kp KP_N0 &kp KP_N9>,
                <&macro_release &kp RALT>;
        };

        m_ba_h: macro_brackets_angle_html {
            compatible = "zmk,behavior-macro";
            label = "m_ba_h";
            #binding-cells = <0>;
            bindings =
                <&macro_tap     &kp LT &kp FSLH &kp GT &kp LEFT>;
        };

        m_ba_r: macro_brackets_angle_react {
            compatible = "zmk,behavior-macro";
            label = "m_ba_r";
            #binding-cells = <0>;
            bindings =
                <&macro_tap     &kp LT &kp FSLH &kp GT &kp LEFT &kp LEFT>;
        };

        m_bs: macro_brackets_square {
            compatible = "zmk,behavior-macro";
            label = "m_bs";
            #binding-cells = <0>;
            bindings =
                <&macro_tap     &kp LBKT &kp RBKT &kp LEFT>;
        };

        m_bc: macro_brackets_curly {
            compatible = "zmk,behavior-macro";
            label = "m_bc";
            #binding-cells = <0>;
            bindings =
                <&macro_tap     &kp LBRC &kp RBRC &kp LEFT>;
        };

        m_br: macro_brackets_round {
            compatible = "zmk,behavior-macro";
            label = "m_br";
            #binding-cells = <0>;
            bindings =
                <&macro_tap     &kp LPAR &kp RPAR &kp LEFT>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base_layer {
            bindings = <
 &kp ESC       &kp Q        &kp W       &kp F        &kp P  &kp B           &kp J        &kp L       &kp U        &kp Y      &mp_ko       &mp_bd
  &mp_bc  &hm LCMD A  &hm LCTRL R  &hm LALT S  &hm LSHFT T  &kp G           &kp M  &hm RSHFT N  &hm RALT E  &hm RCTRL I  &hm RCMD O   &mt F2 RET
 &kp TAB       &kp Z        &kp X       &kp C        &kp D  &kp V           &kp K        &kp H   &kp COMMA      &kp DOT      &mp_kl        &none
                                       &mp_kq    &kp SPACE  &to 2           &to 1    &kp SPACE       &to 3
            >;
        };

        symbols_layer {
            bindings = <
   &kp ESC  &kp EXCL  &kp AT  &kp HASH   &kp DLLR  &kp PRCNT          &kp CARET   &kp AMPS  &kp STAR  &kp MINUS     &none       &mp_bd
    &mp_bc     &none   &none     &none      &none   &kp PLUS           &kp HOME   &kp LBRC  &kp RBRC    &kp END  &kp BSLH   &mt F2 RET
   &kp TAB     &none   &none     &none      &none  &kp MINUS           &kp LBKT   &kp LPAR  &kp RPAR   &kp RBKT     &none  &key_repeat
                              &kp LCMD  &kp SPACE      &to 0              &none  &kp SPACE     &to 3
            >;
        };

        arrows_layer {
            bindings = <
 &kp ESC  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3    &bt BT_CLR                  &none             &none            &none          &none   &none       &mp_bd
  &mp_bc         &none      &kp C_PP  &kp C_VOL_DN  &kp C_VOL_UP  &kp C_BRI_UP          &mt HOME LEFT  &mt LC(END) DOWN  &mt LC(HOME) UP  &mt END RIGHT   &none   &mt F2 RET
 &kp TAB         &none         &none    &kp C_PREV    &kp C_NEXT  &kp C_BRI_DN                  &none             &none            &none          &none   &none  &key_repeat
                                          &kp LCMD     &kp SPACE         &to 0                  &to 1         &kp SPACE            &to 3
            >;
        };

        numbers_layer {
            bindings = <
 &kp ESC   &none   &none     &none      &none      &none               &none  &mt F7 N7  &mt F8 N8  &mt F9 N9      &none       &mp_bd
  &mp_bc   &none   &none     &none   &kp STAR   &kp PLUS           &kp EQUAL  &mt F4 N4  &mt F5 N5  &mt F6 N6    &kp DOT   &mt F2 RET
 &kp TAB   &none   &none     &none   &kp FSLH  &kp MINUS          &mt F10 N0  &mt F1 N1  &mt F2 N2  &mt F3 N3  &kp COMMA  &key_repeat
                          &kp LCMD  &kp SPACE      &to 0               &to 1  &kp SPACE      &none
            >;
        };

        settings_layer {
            bindings = <
 &bootloader  &none    &bt BT_PRV    &bt BT_CLR    &bt BT_NXT   &kp RC(RS(PLUS))          &kp C_VOL_UP         &none     &kp C_STOP       &none  &none  &bootloader
      &none   &none  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2     &kp RC(RS(N0))            &kp C_MUTE    &kp C_PREV       &kp C_PP  &kp C_NEXT  &none        &none
      &none   &none  &bt BT_SEL 3  &bt BT_SEL 4  &bt BT_SEL 5  &kp RC(RS(MINUS))          &kp C_VOL_DN         &none  &kp C_SHUFFLE       &none  &none        &none
                                          &none  &kp C_BRI_DN              &to 0                 &to 0  &kp C_BRI_UP          &none
            >;
        };
    };
};
