/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

&mt {
    flavor = "tap-preferred";
    tapping-term-ms = <220>;
    quick-tap-ms = <220>;// repeat on tap-into-hold
    hold-trigger-key-positions = <0>;// tap on interrupt
};

/* Layers */

#define BASE     0
#define DEV      1
#define ACT_NUM  2
#define SETTINGS 3

/* Modifier Keys */

#define L_CTRL    14
#define L_ALT     15
#define L_SHFT    16
#define R_SHFT    19
#define R_ALT     20
#define R_CTRL    21

/ {
    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW MODS";
            #binding-cells = <2>;
            tapping-term-ms = <300>;
            quick-tap-ms = <200>;
            flavor = "tap-preferred";
            bindings =
                <&kp>,
                <&kp>;
        };

        cw: caps_word {
            compatible = "zmk,behavior-caps-word";
            label = "CAPS WORD";
            #binding-cells = <0>;
            continue-list = <UNDERSCORE MINUS BACKSPACE DEL>;
        };

        mp_a: morph_a {
            compatible = "zmk,behavior-mod-morph";
            label = "á Á";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&m_aa>, <&m_aa_shift>;
        };

        mp_e: morph_e {
            compatible = "zmk,behavior-mod-morph";
            label = "é É";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&m_ae>, <&m_ae_shift>;
        };

        mp_i: morph_i {
            compatible = "zmk,behavior-mod-morph";
            label = "í Í";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&m_ai>, <&m_ai_shift>;
        };

        mp_o: morph_o {
            compatible = "zmk,behavior-mod-morph";
            label = "ó Ó";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&m_ao>, <&m_ao_shift>;
        };

        mp_u: morph_u {
            compatible = "zmk,behavior-mod-morph";
            label = "ú Ú ü Ü";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&mt &m_uu &m_au>, <&mt &m_uu_shift &m_au_shift>;
        };

        mp_n: morph_n {
            compatible = "zmk,behavior-mod-morph";
            label = "ñ Ñ";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&m_an>, <&m_an_shift>;
        };

        mp_kn: morph_key_numbers {
            compatible = "zmk,behavior-mod-morph";
            label = "° ª";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&m_nd>, <&m_no>;
        };

        mp_kn_f1: morph_key_numbers_f1 {
            compatible = "zmk,behavior-mod-morph";
            label = "1 F1";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&kp KP_N1>, <&kp F1>;
        };

        mp_kn_f2: morph_key_numbers_f2 {
            compatible = "zmk,behavior-mod-morph";
            label = "2 F2";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&kp KP_N2>, <&kp F2>;
        };

        mp_kn_f3: morph_key_numbers_f3 {
            compatible = "zmk,behavior-mod-morph";
            label = "3 F3";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&kp KP_N3>, <&kp F3>;
        };

        mp_kn_f4: morph_key_numbers_f4 {
            compatible = "zmk,behavior-mod-morph";
            label = "= F4";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&kp KP_EQUAL>, <&kp F4>;
        };

        mp_kn_f5: morph_key_numbers_f5 {
            compatible = "zmk,behavior-mod-morph";
            label = "4 F5";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&kp KP_N4>, <&kp F5>;
        };

        mp_kn_f6: morph_key_numbers_f6 {
            compatible = "zmk,behavior-mod-morph";
            label = "5 F6";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&kp KP_N5>, <&kp F6>;
        };

        mp_kn_f7: morph_key_numbers_f7 {
            compatible = "zmk,behavior-mod-morph";
            label = "6 F7";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&kp KP_N6>, <&kp F7>;
        };

        mp_kn_f8: morph_key_numbers_f8 {
            compatible = "zmk,behavior-mod-morph";
            label = "/ F8";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&kp KP_DIVIDE>, <&kp F8>;
        };

        mp_kn_f9: morph_key_numbers_f9 {
            compatible = "zmk,behavior-mod-morph";
            label = "7 F9";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&kp KP_N7>, <&kp F9>;
        };

        mp_kn_f10: morph_key_numbers_f10 {
            compatible = "zmk,behavior-mod-morph";
            label = "8 F10";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&kp KP_N8>, <&kp F10>;
        };

        mp_kn_f11: morph_key_numbers_f11 {
            compatible = "zmk,behavior-mod-morph";
            label = "9 F11";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&kp KP_N9>, <&kp F11>;
        };

        mp_kn_f12: morph_key_numbers_f12 {
            compatible = "zmk,behavior-mod-morph";
            label = "* F12";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&kp KP_MULTIPLY>, <&kp F12>;
        };

        mp_kbd: morph_key_browser_debug {
            compatible = "zmk,behavior-mod-morph";
            label = "MORPH KEY BROWSER: CTRL+SHIFT_R CTRL+SHIFT+I";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&kp RC(RS(R))>, <&kp RC(RS(I))>;
        };

        mp_bd: morph_backspace_del {
            compatible = "zmk,behavior-mod-morph";
            label = "BACKSPACE DELETE";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&mt LC(BSPC) BSPC>, <&mt LC(DEL) DEL>;
        };

        mp_bc: morph_backspace_caps {
            compatible = "zmk,behavior-mod-morph";
            label = "BACKSPACE CAPS_LOCK";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&mt LC(BSPC) BSPC>, <&kp CLCK>;
        };

        mp_kq: morph_key_quote {
            compatible = "zmk,behavior-mod-morph";
            label = "' ''";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&kp SQT>, <&kp DQT>;
        };

        mp_kq_alt: morph_key_quote_alt {
            compatible = "zmk,behavior-mod-morph";
            label = "` ~";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&kp GRAVE>, <&kp TILDE>;
        };

        mp_ko: morph_key_operator {
            compatible = "zmk,behavior-mod-morph";
            label = "- +";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&kp MINUS>, <&kp PLUS>;
        };

        mp_ko_alt: morph_key_operator_alt {
            compatible = "zmk,behavior-mod-morph";
            label = "= *";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&kp EQUAL>, <&kp ASTRK>;
        };

        mp_kl: morph_key_logic {
            compatible = "zmk,behavior-mod-morph";
            label = "/ &";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&kp FSLH>, <&kp AMPS>;
        };

        mp_kl_alt: morph_key_logic_alt {
            compatible = "zmk,behavior-mod-morph";
            label = "? |";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&kp QMARK>, <&kp PIPE>;
        };

        mp_kb: morph_key_brackets {
            compatible = "zmk,behavior-mod-morph";
            label = "{} </>";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&m_bc>, <&m_ba_h>;
        };

        mp_kb_alt: morph_key_brackets_alt {
            compatible = "zmk,behavior-mod-morph";
            label = "[] ()";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&m_bs>, <&m_br>;
        };

        mp_d_la: morph_dev_left_angle {
            compatible = "zmk,behavior-mod-morph";
            label = "< «";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&kp LT>, <&m_lda>;
        };

        mp_d_la_alt: morph_dev_left_angle_alt {
            compatible = "zmk,behavior-mod-morph";
            label = "<= </>";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&m_ldae>, <&m_ba_h>;
        };

        mp_d_ra: morph_dev_right_angle {
            compatible = "zmk,behavior-mod-morph";
            label = "> »";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&kp GT>, <&m_rda>;
        };

        mp_d_cs: morph_dev_comma_semi {
            compatible = "zmk,behavior-mod-morph";
            label = ", ;";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&kp COMMA>, <&kp SEMI>;
        };

        mp_d_dc: morph_dev_dot_colon {
            compatible = "zmk,behavior-mod-morph";
            label = ". :";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&kp DOT>, <&kp COLON>;
        };

        mp_d_a: morph_dev_asterisk {
            compatible = "zmk,behavior-mod-morph";
            label = "* **";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&kp ASTRK>, <&m_d_da>;
        };
    };

    combos {
        compatible = "zmk,combos";

        combo_caps-word {
            bindings = <&cw>; /* Label: CAPS WORD*/
            key-positions = <L_SHFT R_SHFT>;
        };

        l0_combo_accent_a_alt {
            bindings = <&mp_a>; /* Label: á Á*/
            key-positions = <13 R_ALT>;
            layers = <0>;
        };

        l0_combo_accent_e_alt {
            bindings = <&mp_e>; /* Label: é É*/
            key-positions = <20 L_ALT>;
            layers = <0>;
        };

        l0_combo_accent_i_alt {
            bindings = <&mp_i>; /* Label: í Í*/
            key-positions = <21 L_ALT>;
            layers = <0>;
        };

        l0_combo_accent_o_alt {
            bindings = <&mp_o>; /* Label: ó Ó*/
            key-positions = <22 L_ALT>;
            layers = <0>;
        };

        l0_combo_accent_u_alt {
            bindings = <&mp_u>; /* Label: ú Ú ü Ü */
            key-positions = <9 L_ALT>;
            layers = <0>;
        };

        l0_combo_accent_n_alt {
            bindings = <&mp_n>; /* Label: ñ Ñ */
            key-positions = <19 L_ALT>;
            layers = <0>;
        };

        l0_combo_quotes_alt {
            bindings = <&mp_kq_alt>; /* Label: ` ~ */
            key-positions = <36 R_ALT>;
            layers = <0>;
        };

        l0_combo_operators_alt {
            bindings = <&mp_ko_alt>; /* Label: = * */
            key-positions = <10 L_ALT>;
            layers = <0>;
        };

        l0_combo_logic_alt {
            bindings = <&mp_kl_alt>; /* Label: ? | */
            key-positions = <34 L_ALT>;
            layers = <0>;
        };

        l0_combo_brackets_alt {
            bindings = <&mp_kb_alt>; /* Label: [] () */
            key-positions = <35 L_ALT>;
            layers = <0>;
        };

        l0_combo_brackets_alt_ctrl {
            bindings = <&m_ba_r>; /* Label: <█/> */
            key-positions = <35 L_CTRL L_ALT>;
            layers = <0>;
        };

        l1_combo_dev_left_angle_alt {
            bindings = <&mp_d_la_alt>; /* Label: <= </> */
            key-positions = <26 R_ALT>;
            layers = <1>;
        };

        l1_combo_dev_left_angle_alt_ctrl {
            bindings = <&m_ba_r>; /* Label: <█/> */
            key-positions = <26 R_ALT R_CTRL>;
            layers = <1>;
        };

        l1_combo_dev_right_angle_alt {
            bindings = <&m_rdae>; /* Label: >= */
            key-positions = <27 R_ALT>;
            layers = <1>;
        };

        l1_combo_dev_asterisk {
            bindings = <&m_d_mao>; /* Label: **= */
            key-positions = <28 R_ALT>;
            layers = <1>;
        };
    };

    macros {
        m_aa: macro_accent_a {
            compatible = "zmk,behavior-macro";
            label = "á";
            #binding-cells = <0>;
            bindings =
                <&macro_press   &kp RALT>,
                <&macro_tap     &kp KP_N0 &kp KP_N2 &kp KP_N2 &kp KP_N5>,
                <&macro_release &kp RALT>;
        };

        m_aa_shift: macro_accent_a_shift {
            compatible = "zmk,behavior-macro";
            label = "Á";
            #binding-cells = <0>;
            bindings =
                <&macro_press   &kp RALT>,
                <&macro_tap     &kp KP_N0 &kp KP_N1 &kp KP_N9 &kp KP_N3>,
                <&macro_release &kp RALT>;
        };

        m_ae: macro_accent_e_alt {
            compatible = "zmk,behavior-macro";
            label = "é";
            #binding-cells = <0>;
            bindings =
                <&macro_press   &kp RALT>,
                <&macro_tap     &kp KP_N0 &kp KP_N2 &kp KP_N3 &kp KP_N3>,
                <&macro_release &kp RALT>;
        };

        m_ae_shift: macro_accent_e_shift {
            compatible = "zmk,behavior-macro";
            label = "É";
            #binding-cells = <0>;
            bindings =
                <&macro_press   &kp RALT>,
                <&macro_tap     &kp KP_N0 &kp KP_N2 &kp KP_N0 &kp KP_N1>,
                <&macro_release &kp RALT>;
        };

        m_ai: macro_accent_i {
            compatible = "zmk,behavior-macro";
            label = "í";
            #binding-cells = <0>;
            bindings =
                <&macro_press   &kp RALT>,
                <&macro_tap     &kp KP_N0 &kp KP_N2 &kp KP_N3 &kp KP_N7>,
                <&macro_release &kp RALT>;
        };

        m_ai_shift: macro_accent_i_shift {
            compatible = "zmk,behavior-macro";
            label = "Í";
            #binding-cells = <0>;
            bindings =
                <&macro_press   &kp RALT>,
                <&macro_tap     &kp KP_N0 &kp KP_N2 &kp KP_N0 &kp KP_N5>,
                <&macro_release &kp RALT>;
        };

        m_ao: macro_accent_o {
            compatible = "zmk,behavior-macro";
            label = "ó";
            #binding-cells = <0>;
            bindings =
                <&macro_press   &kp RALT>,
                <&macro_tap     &kp KP_N0 &kp KP_N2 &kp KP_N4 &kp KP_N3>,
                <&macro_release &kp RALT>;
        };

        m_ao_shift: macro_accent_o_shift {
            compatible = "zmk,behavior-macro";
            label = "Ó";
            #binding-cells = <0>;
            bindings =
                <&macro_press   &kp RALT>,
                <&macro_tap     &kp KP_N0 &kp KP_N2 &kp KP_N1 &kp KP_N1>,
                <&macro_release &kp RALT>;
        };

        m_au: macro_accent_u {
            compatible = "zmk,behavior-macro";
            label = "ú";
            #binding-cells = <0>;
            bindings =
                <&macro_press   &kp RALT>,
                <&macro_tap     &kp KP_N0 &kp KP_N2 &kp KP_N5 &kp KP_N0>,
                <&macro_release &kp RALT>;
        };

        m_au_shift: macro_accent_u_shift {
            compatible = "zmk,behavior-macro";
            label = "Ú";
            #binding-cells = <0>;
            bindings =
                <&macro_press   &kp RALT>,
                <&macro_tap     &kp KP_N0 &kp KP_N2 &kp KP_N1 &kp KP_N8>,
                <&macro_release &kp RALT>;
        };

        m_uu: macro_umlaut_u {
            compatible = "zmk,behavior-macro";
            label = "ü";
            #binding-cells = <0>;
            bindings =
                <&macro_press   &kp RALT>,
                <&macro_tap     &kp KP_N0 &kp KP_N2 &kp KP_N5 &kp KP_N2>,
                <&macro_release &kp RALT>;
        };

        m_uu_shift: macro_umlaut_u_shift {
            compatible = "zmk,behavior-macro";
            label = "Ü";
            #binding-cells = <0>;
            bindings =
                <&macro_press   &kp RALT>,
                <&macro_tap     &kp KP_N0 &kp KP_N2 &kp KP_N2 &kp KP_N0>,
                <&macro_release &kp RALT>;
        };

        m_an: macro_accent_n {
            compatible = "zmk,behavior-macro";
            label = "ñ";
            #binding-cells = <0>;
            bindings =
                <&macro_press   &kp RALT>,
                <&macro_tap     &kp KP_N0 &kp KP_N2 &kp KP_N4 &kp KP_N1>,
                <&macro_release &kp RALT>;
        };

        m_an_shift: macro_accent_n_shift {
            compatible = "zmk,behavior-macro";
            label = "Ñ";
            #binding-cells = <0>;
            bindings =
                <&macro_press   &kp RALT>,
                <&macro_tap     &kp KP_N0 &kp KP_N2 &kp KP_N0 &kp KP_N9>,
                <&macro_release &kp RALT>;
        };

        m_no: macro_number_ordinal {
            compatible = "zmk,behavior-macro";
            label = "°";
            #binding-cells = <0>;
            bindings =
                <&macro_press   &kp RALT>,
                <&macro_tap     &kp KP_N0 &kp KP_N1 &kp KP_N7 &kp KP_N0>,
                <&macro_release &kp RALT>;
        };

        m_nd: macro_number_degree {
            compatible = "zmk,behavior-macro";
            label = "ª";
            #binding-cells = <0>;
            bindings =
                <&macro_press   &kp RALT>,
                <&macro_tap     &kp KP_N0 &kp KP_N1 &kp KP_N7 &kp KP_N6>,
                <&macro_release &kp RALT>;
        };

        m_ba_h: macro_brackets_angle_html {
            compatible = "zmk,behavior-macro";
            label = "</█>";
            #binding-cells = <0>;
            bindings =
                <&macro_tap     &kp LT &kp FSLH &kp GT &kp LEFT>;
        };

        m_ba_r: macro_brackets_angle_react {
            compatible = "zmk,behavior-macro";
            label = "<█/>";
            #binding-cells = <0>;
            bindings =
                <&macro_tap     &kp LT &kp FSLH &kp GT &kp LEFT &kp LEFT>;
        };

        m_bs: macro_brackets_square {
            compatible = "zmk,behavior-macro";
            label = "[█]";
            #binding-cells = <0>;
            bindings =
                <&macro_tap     &kp LBKT &kp RBKT &kp LEFT>;
        };

        m_bc: macro_brackets_curly {
            compatible = "zmk,behavior-macro";
            label = "{█}";
            #binding-cells = <0>;
            bindings =
                <&macro_tap     &kp LBRC &kp RBRC &kp LEFT>;
        };

        m_br: macro_brackets_round {
            compatible = "zmk,behavior-macro";
            label = "(█)";
            #binding-cells = <0>;
            bindings =
                <&macro_tap     &kp LPAR &kp RPAR &kp LEFT>;
        };

        m_lda: macro_left_double_angle {
            compatible = "zmk,behavior-macro";
            label = "«";
            #binding-cells = <0>;
            bindings =
                <&macro_press   &kp RALT>,
                <&macro_tap     &kp KP_N0 &kp KP_N1 &kp KP_N7 &kp KP_N1>,
                <&macro_release &kp RALT>;
        };

        m_rda: macro_right_double_angle {
            compatible = "zmk,behavior-macro";
            label = "»";
            #binding-cells = <0>;
            bindings =
                <&macro_press   &kp RALT>,
                <&macro_tap     &kp KP_N0 &kp KP_N1 &kp KP_N8 &kp KP_N7>,
                <&macro_release &kp RALT>;
        };

        m_ldae: macro_left_double_angle_equal {
            compatible = "zmk,behavior-macro";
            label = "<=";
            #binding-cells = <0>;
            bindings =
                <&macro_tap     &kp LT &kp EQUAL>;
        };

        m_rdae: macro_right_double_angle_equal {
            compatible = "zmk,behavior-macro";
            label = ">=";
            #binding-cells = <0>;
            bindings =
                <&macro_tap     &kp GT &kp EQUAL>;
        };

        m_d_da: macro_dev_double_asterisk {
            compatible = "zmk,behavior-macro";
            label = "**";
            #binding-cells = <0>;
            bindings =
                <&macro_tap     &kp ASTRK &kp ASTRK>;
        };

        m_d_mao: macro_dev_multiply_assignment_operator {
            compatible = "zmk,behavior-macro";
            label = "**=";
            #binding-cells = <0>;
            bindings =
                <&macro_tap     &kp ASTRK &kp ASTRK &kp EQUAL>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base_layer {
            bindings = <
 &kp ESC       &kp Q        &kp W       &kp F        &kp P  &kp B           &kp J        &kp L       &kp U        &kp Y      &mp_ko       &mp_bd
  &mp_bc  &hm LCMD A  &hm LCTRL R  &hm LALT S  &hm LSHFT T  &kp G           &kp M  &hm RSHFT N  &hm RALT E  &hm RCTRL I  &hm RCMD O   &mt F2 RET
 &kp TAB       &kp Z        &kp X       &kp C        &kp D  &kp V           &kp K        &kp H   &kp COMMA      &kp DOT      &mp_kl       &mp_kb
                                       &mp_kq    &kp SPACE  &to 2           &to 1    &kp SPACE       &to 3
            >;
        };

        dev_layer {
            bindings = <
   &kp ESC  &kp AT  &kp POUND     &none      &none    &kp DQT          &kp TILDE      &none  &kp UNDER  &kp PRCNT  &kp CARET       &mp_bd
    &mp_bc   &none   &kp LBRC  &kp RBRC      &none    &kp SQT          &kp GRAVE      &none   &kp LBKT   &kp RBKT      &none   &mt F2 RET
   &kp TAB  &mp_kn   &mp_d_la  &mp_d_ra    &mp_d_a   &kp BSLH              &none      &none   &kp LPAR   &kp RPAR      &none  &key_repeat
                               &mp_d_cs  &kp SPACE      &to 2              &to 0  &kp SPACE   &mp_d_dc
            >;
        };

        act_num_layer {
            bindings = <
 &kp ESC   &kp PG_DN   &kp RC(PG_DN)   &mt LC(HOME) UP        &kp RC(PG_UP)  &kp PG_UP            &kp KP_PLUS  &mp_kn_f9  &mp_kn_f10  &mp_kn_f11  &mp_kn_f12       &mp_bd
  &mp_bc   &kp PSCRN   &mt HOME LEFT  &mt LC(END) DOWN        &mt END RIGHT    &mp_kbd           &kp KP_MINUS  &mp_kn_f5   &mp_kn_f6   &mp_kn_f7   &mp_kn_f8   &mt F2 RET
 &kp TAB   &kp RC(Z)       &kp RC(X)         &kp RC(C)  &mt RC(V) RC(RS(V))  &kp RC(Y)              &kp KP_N0  &mp_kn_f1   &mp_kn_f2   &mp_kn_f3   &mp_kn_f4  &key_repeat
                                                &mp_kn            &kp SPACE      &to 1                  &to 0  &kp SPACE  &kp KP_DOT
            >;
        };

        settings_layer {
            bindings = <
 &bootloader  &none    &bt BT_PRV    &bt BT_CLR    &bt BT_NXT   &kp RC(RS(PLUS))          &kp C_VOL_UP         &none     &kp C_STOP       &none  &none  &bootloader
      &none   &none  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2     &kp RC(RS(N0))            &kp C_MUTE    &kp C_PREV       &kp C_PP  &kp C_NEXT  &none        &none
      &none   &none  &bt BT_SEL 3  &bt BT_SEL 4  &bt BT_SEL 5  &kp RC(RS(MINUS))          &kp C_VOL_DN         &none  &kp C_SHUFFLE       &none  &none        &none
                                          &none  &kp C_BRI_DN              &to 0                 &to 0  &kp C_BRI_UP          &none
            >;
        };
    };
};
