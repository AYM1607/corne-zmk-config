/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

&mt {
    flavor = "tap-preferred";
    tapping-term-ms = <220>;
    quick-tap-ms = <220>;// repeat on tap-into-hold
    hold-trigger-key-positions = <0>;// tap on interrupt
};

/* Layers */

#define BASE     0
#define DEV      1
#define ACT_NUM  2
#define SETTINGS 3



/ {
    behaviors {
        #include "./morph/shared.dtsi"
        #include "./morph/base.dtsi"
        #include "./morph/accents.dtsi"
        #include "./morph/num.dtsi"
        #include "./morph/actions.dtsi"
        #include "./morph/dev.dtsi"
    };

    combos {
        compatible = "zmk,combos";

        /* Modifier Keys */
        #define L_CTRL    14
        #define L_ALT     15
        #define L_SHFT    16
        #define R_SHFT    19
        #define R_ALT     20
        #define R_CTRL    21

        #include "./combos/shared.dtsi"
        #include "./combos/accents.dtsi"
        #include "./combos/base.dtsi"
        #include "./combos/dev.dtsi"
    };

    macros {
        /* Vowels and Accents */

        m_aa: macro_accent_a {
            compatible = "zmk,behavior-macro";
            label = "á";
            #binding-cells = <0>;
            bindings =
                <&macro_press   &kp RALT>,
                <&macro_tap     &kp KP_N0 &kp KP_N2 &kp KP_N2 &kp KP_N5>,
                <&macro_release &kp RALT>;
        };

        m_aa_shift: macro_accent_a_shift {
            compatible = "zmk,behavior-macro";
            label = "Á";
            #binding-cells = <0>;
            bindings =
                <&macro_press   &kp RALT>,
                <&macro_tap     &kp KP_N0 &kp KP_N1 &kp KP_N9 &kp KP_N3>,
                <&macro_release &kp RALT>;
        };

        m_ae: macro_accent_e_alt {
            compatible = "zmk,behavior-macro";
            label = "é";
            #binding-cells = <0>;
            bindings =
                <&macro_press   &kp RALT>,
                <&macro_tap     &kp KP_N0 &kp KP_N2 &kp KP_N3 &kp KP_N3>,
                <&macro_release &kp RALT>;
        };

        m_ae_shift: macro_accent_e_shift {
            compatible = "zmk,behavior-macro";
            label = "É";
            #binding-cells = <0>;
            bindings =
                <&macro_press   &kp RALT>,
                <&macro_tap     &kp KP_N0 &kp KP_N2 &kp KP_N0 &kp KP_N1>,
                <&macro_release &kp RALT>;
        };

        m_ai: macro_accent_i {
            compatible = "zmk,behavior-macro";
            label = "í";
            #binding-cells = <0>;
            bindings =
                <&macro_press   &kp RALT>,
                <&macro_tap     &kp KP_N0 &kp KP_N2 &kp KP_N3 &kp KP_N7>,
                <&macro_release &kp RALT>;
        };

        m_ai_shift: macro_accent_i_shift {
            compatible = "zmk,behavior-macro";
            label = "Í";
            #binding-cells = <0>;
            bindings =
                <&macro_press   &kp RALT>,
                <&macro_tap     &kp KP_N0 &kp KP_N2 &kp KP_N0 &kp KP_N5>,
                <&macro_release &kp RALT>;
        };

        m_ao: macro_accent_o {
            compatible = "zmk,behavior-macro";
            label = "ó";
            #binding-cells = <0>;
            bindings =
                <&macro_press   &kp RALT>,
                <&macro_tap     &kp KP_N0 &kp KP_N2 &kp KP_N4 &kp KP_N3>,
                <&macro_release &kp RALT>;
        };

        m_ao_shift: macro_accent_o_shift {
            compatible = "zmk,behavior-macro";
            label = "Ó";
            #binding-cells = <0>;
            bindings =
                <&macro_press   &kp RALT>,
                <&macro_tap     &kp KP_N0 &kp KP_N2 &kp KP_N1 &kp KP_N1>,
                <&macro_release &kp RALT>;
        };

        m_au: macro_accent_u {
            compatible = "zmk,behavior-macro";
            label = "ú";
            #binding-cells = <0>;
            bindings =
                <&macro_press   &kp RALT>,
                <&macro_tap     &kp KP_N0 &kp KP_N2 &kp KP_N5 &kp KP_N0>,
                <&macro_release &kp RALT>;
        };

        m_au_shift: macro_accent_u_shift {
            compatible = "zmk,behavior-macro";
            label = "Ú";
            #binding-cells = <0>;
            bindings =
                <&macro_press   &kp RALT>,
                <&macro_tap     &kp KP_N0 &kp KP_N2 &kp KP_N1 &kp KP_N8>,
                <&macro_release &kp RALT>;
        };

        m_uu: macro_umlaut_u {
            compatible = "zmk,behavior-macro";
            label = "ü";
            #binding-cells = <0>;
            bindings =
                <&macro_press   &kp RALT>,
                <&macro_tap     &kp KP_N0 &kp KP_N2 &kp KP_N5 &kp KP_N2>,
                <&macro_release &kp RALT>;
        };

        m_uu_shift: macro_umlaut_u_shift {
            compatible = "zmk,behavior-macro";
            label = "Ü";
            #binding-cells = <0>;
            bindings =
                <&macro_press   &kp RALT>,
                <&macro_tap     &kp KP_N0 &kp KP_N2 &kp KP_N2 &kp KP_N0>,
                <&macro_release &kp RALT>;
        };

        m_an: macro_accent_n {
            compatible = "zmk,behavior-macro";
            label = "ñ";
            #binding-cells = <0>;
            bindings =
                <&macro_press   &kp RALT>,
                <&macro_tap     &kp KP_N0 &kp KP_N2 &kp KP_N4 &kp KP_N1>,
                <&macro_release &kp RALT>;
        };

        m_an_shift: macro_accent_n_shift {
            compatible = "zmk,behavior-macro";
            label = "Ñ";
            #binding-cells = <0>;
            bindings =
                <&macro_press   &kp RALT>,
                <&macro_tap     &kp KP_N0 &kp KP_N2 &kp KP_N0 &kp KP_N9>,
                <&macro_release &kp RALT>;
        };


        /* Numbers Layer */

        m_no: macro_number_ordinal {
            compatible = "zmk,behavior-macro";
            label = "°";
            #binding-cells = <0>;
            bindings =
                <&macro_press   &kp RALT>,
                <&macro_tap     &kp KP_N0 &kp KP_N1 &kp KP_N7 &kp KP_N0>,
                <&macro_release &kp RALT>;
        };

        m_nd: macro_number_degree {
            compatible = "zmk,behavior-macro";
            label = "ª";
            #binding-cells = <0>;
            bindings =
                <&macro_press   &kp RALT>,
                <&macro_tap     &kp KP_N0 &kp KP_N1 &kp KP_N7 &kp KP_N6>,
                <&macro_release &kp RALT>;
        };

        m_d_euro: macro_euro {
            compatible = "zmk,behavior-macro";
            label = "€";
            #binding-cells = <0>;
            bindings =
                <&macro_press   &kp RALT>,
                <&macro_tap     &kp KP_N0 &kp KP_N1 &kp KP_N2 &kp KP_N8>,
                <&macro_release &kp RALT>;
        };


        /* Dev Layer */

        m_ba_h: macro_brackets_angle_html {
            compatible = "zmk,behavior-macro";
            label = "</█>";
            #binding-cells = <0>;
            bindings =
                <&macro_tap     &kp LT &kp FSLH &kp GT &kp LEFT>;
        };

        m_ba_r: macro_brackets_angle_react {
            compatible = "zmk,behavior-macro";
            label = "<█/>";
            #binding-cells = <0>;
            bindings =
                <&macro_tap     &kp LT &kp FSLH &kp GT &kp LEFT &kp LEFT>;
        };

        m_bs: macro_brackets_square {
            compatible = "zmk,behavior-macro";
            label = "[█]";
            #binding-cells = <0>;
            bindings =
                <&macro_tap     &kp LBKT &kp RBKT &kp LEFT>;
        };

        m_bc: macro_brackets_curly {
            compatible = "zmk,behavior-macro";
            label = "{█}";
            #binding-cells = <0>;
            bindings =
                <&macro_tap     &kp LBRC &kp RBRC &kp LEFT>;
        };

        m_br: macro_brackets_round {
            compatible = "zmk,behavior-macro";
            label = "(█)";
            #binding-cells = <0>;
            bindings =
                <&macro_tap     &kp LPAR &kp RPAR &kp LEFT>;
        };

        m_lda: macro_left_double_angle {
            compatible = "zmk,behavior-macro";
            label = "«";
            #binding-cells = <0>;
            bindings =
                <&macro_press   &kp RALT>,
                <&macro_tap     &kp KP_N0 &kp KP_N1 &kp KP_N7 &kp KP_N1>,
                <&macro_release &kp RALT>;
        };

        m_rda: macro_right_double_angle {
            compatible = "zmk,behavior-macro";
            label = "»";
            #binding-cells = <0>;
            bindings =
                <&macro_press   &kp RALT>,
                <&macro_tap     &kp KP_N0 &kp KP_N1 &kp KP_N8 &kp KP_N7>,
                <&macro_release &kp RALT>;
        };

        m_ltoe: macro_less_than_or_equal {
            compatible = "zmk,behavior-macro";
            label = "<=";
            #binding-cells = <0>;
            bindings =
                <&macro_tap     &kp LT &kp EQUAL>;
        };

        m_gtoe: macro_greater_than_or_equal {
            compatible = "zmk,behavior-macro";
            label = ">=";
            #binding-cells = <0>;
            bindings =
                <&macro_tap     &kp GT &kp EQUAL>;
        };

        m_d_eo: macro_dev_exponentiation_operator {
            compatible = "zmk,behavior-macro";
            label = "**";
            #binding-cells = <0>;
            bindings =
                <&macro_tap     &kp ASTRK &kp ASTRK>;
        };

        m_d_mao: macro_dev_multiplication_assignment_operator {
            compatible = "zmk,behavior-macro";
            label = "*=";
            #binding-cells = <0>;
            bindings =
                <&macro_tap     &kp ASTRK &kp EQUAL>;
        };

        m_d_dao: macro_dev_division_assignment_operator {
            compatible = "zmk,behavior-macro";
            label = "/=";
            #binding-cells = <0>;
            bindings =
                <&macro_tap     &kp FSLH &kp EQUAL>;
        };

        m_d_io: macro_dev_increment_operator {
            compatible = "zmk,behavior-macro";
            label = "++";
            #binding-cells = <0>;
            bindings =
                <&macro_tap     &kp PLUS &kp PLUS>;
        };

        m_d_aao: macro_dev_addition_assignment_operator {
            compatible = "zmk,behavior-macro";
            label = "+=";
            #binding-cells = <0>;
            bindings =
                <&macro_tap     &kp PLUS &kp EQUAL>;
        };

        m_d_se: macro_dev_triple_equal {
            compatible = "zmk,behavior-macro";
            label = "===";
            #binding-cells = <0>;
            bindings =
                <&macro_tap     &kp EQUAL &kp EQUAL &kp EQUAL>;
        };

        m_d_a: macro_dev_arrow {
            compatible = "zmk,behavior-macro";
            label = "=>";
            #binding-cells = <0>;
            bindings =
                <&macro_tap     &kp EQUAL &kp GT>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base_layer {
            bindings = <
 &kp ESC       &kp Q        &kp W       &kp F        &kp P  &kp B           &kp J        &kp L       &kp U        &kp Y      &mp_ko       &mp_bd
  &mp_bc  &hm LCMD A  &hm LCTRL R  &hm LALT S  &hm LSHFT T  &kp G           &kp M  &hm RSHFT N  &hm RALT E  &hm RCTRL I  &hm RCMD O   &mt F2 RET
 &kp TAB       &kp Z        &kp X       &kp C        &kp D  &kp V           &kp K        &kp H   &kp COMMA      &kp DOT      &mp_kl       &mp_kb
                                       &mp_kq    &kp SPACE  &to 2           &to 1    &kp SPACE       &to 3
            >;
        };

        dev_layer {
            bindings = <
   &kp ESC  &kp AT  &kp POUND   &mp_d_m    &mp_d_p    &kp DQT          &kp TILDE      &none  &kp UNDER  &kp PRCNT  &kp CARET       &mp_bd
    &mp_bc   &none   &kp LBRC  &kp RBRC    &mp_d_e    &kp SQT          &kp GRAVE      &none   &kp LBKT   &kp RBKT      &none   &mt F2 RET
   &kp TAB  &mp_kn   &mp_d_la  &mp_d_ra    &mp_d_a   &kp BSLH           &kp FSLH      &none   &kp LPAR   &kp RPAR      &none  &key_repeat
                               &mp_d_cs  &kp SPACE      &to 2              &to 0  &kp SPACE   &mp_d_dc
            >;
        };

        act_num_layer {
            bindings = <
 &kp ESC   &kp PG_DN   &kp RC(PG_DN)   &mt LC(HOME) UP        &kp RC(PG_UP)  &kp PG_UP            &kp KP_PLUS  &mp_kn_f9  &mp_kn_f10  &mp_kn_f11  &mp_kn_f12       &mp_bd
  &mp_bc   &kp PSCRN   &mt HOME LEFT  &mt LC(END) DOWN        &mt END RIGHT    &mp_kbd                &mp_k_m  &mp_kn_f5   &mp_kn_f6   &mp_kn_f7   &mp_kn_f8   &mt F2 RET
 &kp TAB   &kp RC(Z)       &kp RC(X)         &kp RC(C)  &mt RC(V) RC(RS(V))  &kp RC(Y)              &kp KP_N0  &mp_kn_f1   &mp_kn_f2   &mp_kn_f3   &mp_kn_f4  &key_repeat
                                                &mp_kn            &kp SPACE      &to 1                  &to 0  &kp SPACE  &kp KP_DOT
            >;
        };

        settings_layer {
            bindings = <
 &bootloader  &none    &bt BT_PRV    &bt BT_CLR    &bt BT_NXT   &kp RC(RS(PLUS))          &kp C_VOL_UP         &none     &kp C_STOP       &none  &none  &bootloader
      &none   &none  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2     &kp RC(RS(N0))            &kp C_MUTE    &kp C_PREV       &kp C_PP  &kp C_NEXT  &none        &none
      &none   &none  &bt BT_SEL 3  &bt BT_SEL 4  &bt BT_SEL 5  &kp RC(RS(MINUS))          &kp C_VOL_DN         &none  &kp C_SHUFFLE       &none  &none        &none
                                          &none  &kp C_BRI_DN              &to 0                 &to 0  &kp C_BRI_UP          &none
            >;
        };
    };
};
